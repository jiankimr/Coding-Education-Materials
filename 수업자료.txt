1. totalSum.py로 복습해보자.

#변수와 자료형
-----------------------------------------------------------------------
변수 사용 목적                 변수명          자료형
------------------------------------------------------------------------
합계를 저장하기 위해            sum             int
input.txt 파일을 열기 위해      f               file object
파일의 내용을 줄 단위로 저장     lines           list of str
한 줄의 내용을 숫자로 저장       num             int
반복문에서의 인덱스 값을 추적     i               int
output.txt 파일을 열기 위해     f               file object (재사용됨)
-------------------------------------------------------------------------

#만약, 아래와 같은 코드가 추가된다면?
name=input("파일 주인의 이름을 입력해주세요.") #이름 변수
*변수 사용 목적: 파일을 주인의 이름 저장
*변수명: name
*자료 종류: str(문자열)



#연산자
--------------------------------------------------
연산자          연산자 종류              코드 line
--------------------------------------------------
=               할당 연산자             sum= 0
                                     f = open("input.txt", "r")
                                     lines = f.readlines()
                                     num = int(lines[i])
                                     sum = sum + num
                                     f = open("output.txt", "w", encoding="utf-8")

+               산술 연산자 (더하기)      sum = sum + num
                                     f.write("합계:" + str(sum))

:               범위 연산자             for i in range(0,len(lines)):
                                     f = open("output.txt", "w", encoding="utf-8")
                                     f.write("합계:" + str(sum))

,               구분 연산자             f = open("output.txt", "w", encoding="utf-8")

()              괄호 (함수 호출)         f = open("input.txt", "r")
                                     lines = f.readlines()
                                     num = int(lines[i])
                                     range(0,len(lines))
                                     print(num)
                                     print("합계:", sum)
                                     f.write("합계:" + str(sum))

[]              괄호 (인덱싱)            num = int(lines[i])

#               주석 연산자              # 합계 변수
                                     # input.txt 파일 열기
                                     # ... (기타 주석들)
--------------------------------------------------



#기본 입출력
-----------------------------------------------
기능                   코드 line
-----------------------------------------------
화면에 출력              print(num)
                        print("합계:", sum)
-----------------------------------------------
#만약, 아래와 같은 코드가 추가된다면?
name=input("파일 주인의 이름을 입력해주세요.") #이름 변수
*기능: 키보드로부터 입력



#파일 입출력
-------------------------------------------------------------
기능                 방향      파일명         코드 line
-------------------------------------------------------------
파일 열기              읽기      input.txt      f = open("input.txt", "r")
전체 내용 가져오기      읽기      input.txt      lines = f.readlines()
파일 닫기              읽기      input.txt      f.close()
파일 열기              쓰기      output.txt     f = open("output.txt", "w", encoding="utf-8")
결과 저장               쓰기      output.txt     f.write("합계:" + str(sum))
파일 닫기              쓰기      output.txt     f.close()
-------------------------------------------------------------


===============================================================================================


2. 파일 입출력이 어떤 거더라?

#파일 입출력 순서
-----------------------------------------------
단계        | 설명
-----------------------------------------------
파일 열기   | 파일을 열기(모드에 따른)
파일 처리   | 파일로부터 읽기 또는 파일에 쓰기
파일 닫기   | 파일을 닫기
-----------------------------------------------

#파일 모드
-----------------------------
모드      | 설명
-----------------------------
r        | 읽기(read)
w        | 쓰기(write)
a        | 기존 내용에 추가(append)
-----------------------------


#파일 입출력 함수와 사용 방법
----------------------------------------------------------
함수        | 기능                                  | 사용 방법
----------------------------------------------------------
open()      | 파일 열기(모드에 따른)                 | 파일변수 = open("파일명", "모드명")
close()     | 파일 닫기                             | 파일변수.close()
readline()  | 파일의 줄 하나씩 읽어오기             | 변수 = 파일변수.readline()
read()      | 파일의 전체 내용을 한 번에 읽기       | 변수 = 파일변수.read()
write()     | 파일에 특정 내용 쓰기                 | 파일변수.write("내용")
----------------------------------------------------------


======================================================================
3. encoding='utf-8'

#오류 코드
$ python -u "c:\Users\user\Desktop\수업시연\quizBot정답.py"
Traceback (most recent call last):
  File "c:\Users\user\Desktop\수업시연\quizBot정답.py", line 15, in <module>
    lines = f.readlines()
UnicodeDecodeError: 'cp949' codec can't decode byte 0xb0 in position 11: illegal multibyte sequence

#원인
이 오류 메시지는 파일을 읽을 때 인코딩 문제가 발생했음을 나타냅니다. Python에서 파일을 열 때 기본적으로 운영체제의 기본 인코딩을 사용하는데, Windows에서는 cp949가 자주 사용됩니다. 
그러나 파일이 다른 인코딩, 예를 들어 UTF-8로 인코딩되어 있다면, 이 기본 인코딩으로는 파일을 올바르게 읽을 수 없고 오류가 발생합니다.
이 문제를 해결하려면 파일을 열 때 올바른 인코딩을 명시적으로 지정해야 합니다. 대부분의 경우, 현대 텍스트 파일은 UTF-8 인코딩을 사용하므로, 파일을 열 때 encoding='utf-8' 옵션을 추가하여 문제를 해결할 수 있습니다.

#해결
f = open("넌센스퀴즈.txt", "r", encoding='utf-8')


=========================================================================
4. strip()

strip() 함수는 문자열의 시작과 끝에 있는 공백과 개행 문자(\n)와 같은 여백 공간 문자를 제거하는 데 사용됩니다. 파일에서 텍스트를 읽을 때, 각 줄의 끝에는 일반적으로 개행 문자가 포함되어 있어서, 이 문자를 제거하지 않으면 예상치 못한 결과가 발생할 수 있습니다.

예를 들어, 텍스트 파일에서 다음과 같은 퀴즈와 답을 읽었다고 가정해 보겠습니다:

퀴즈1?
답1
퀴즈2?
답2

readlines() 함수를 사용해 이러한 내용을 읽으면, 각 줄은 다음과 같은 리스트의 요소가 됩니다:

["퀴즈1?\n", "답1\n", "퀴즈2?\n", "답2\n"]

여기서 \n은 개행 문자를 나타냅니다. 만약 사용자가 답변으로 "답1"을 입력했을 때, 개행 문자가 포함된 원본 문자열 "답1\n"과 비교한다면, 비교는 일치하지 않는다고 평가될 것입니다. 이것은 사용자가 올바른 답을 입력했음에도 불구하고, 문자열 끝에 있는 개행 문자 때문에 틀렸다고 판단되기 때문입니다.

strip() 함수를 사용하여 개행 문자를 제거하면 이러한 문제를 예방할 수 있습니다. 다음은 strip() 함수를 적용한 후의 리스트입니다:

["퀴즈1?", "답1", "퀴즈2?", "답2"]

이제 "답1"과 사용자의 입력을 비교할 때 정확한 비교가 이루어질 수 있습니다. 그러나 이 수업에서는 strip()을 사용하지 않기로 했으므로, 학생들이 strip() 없이도 문제를 해결할 수 있는 방법을 찾아야 할 것입니다. 예를 들어, 사용자 입력을 받은 후에 개행 문자를 추가하여 비교하거나, rstrip()을 사용하여 오른쪽 끝의 개행 문자만 제거하는 방법을 사용할 수 있습니다.